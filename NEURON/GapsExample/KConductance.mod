COMMENT

   **************************************************
   File generated by: neuroConstruct v1.7.1 
   **************************************************

   This file holds the implementation in NEURON of the Cell Mechanism:
   KConductance (Type: Channel mechanism, Model: Template based ChannelML file)

   with parameters: 
   /channelml/@units = Physiological Units 
   /channelml/notes = ChannelML file containing a single Channel description 
   /channelml/channel_type/@name = KConductance 
   /channelml/channel_type/status/@value = stable 
   /channelml/channel_type/status/comment = Equations adapted from HH paper for modern convention of external potential being zero 
   /channelml/channel_type/status/contributor/name = Padraig Gleeson 
   /channelml/channel_type/notes = Simple example of K conductance in squid giant axon. Based on channel from Hodgkin and Huxley 1952 
   /channelml/channel_type/authorList/modelTranslator/name = Padraig Gleeson 
   /channelml/channel_type/authorList/modelTranslator/institution = UCL 
   /channelml/channel_type/authorList/modelTranslator/email = p.gleeson - at - ucl.ac.uk 
   /channelml/channel_type/publication/fullTitle = A. L. Hodgkin and A. F. Huxley, A quantitative description of membrane current and its application             to conduction and excitation in nerve,  ... 
   /channelml/channel_type/publication/pubmedRef = http://www.ncbi.nlm.nih.gov/entrez/query.fcgi?cmd=Retrieve&amp;db=pubmed&amp;dopt=Abstract&amp;list_uids=12991237 
   /channelml/channel_type/neuronDBref/modelName = K channels 
   /channelml/channel_type/neuronDBref/uri = http://senselab.med.yale.edu/senselab/NeuronDB/channelGene2.htm#table3 
   /channelml/channel_type/current_voltage_relation/@cond_law = ohmic 
   /channelml/channel_type/current_voltage_relation/@ion = k 
   /channelml/channel_type/current_voltage_relation/@default_gmax = 36 
   /channelml/channel_type/current_voltage_relation/@default_erev = -77.0 
   /channelml/channel_type/current_voltage_relation/gate/@name = n 
   /channelml/channel_type/current_voltage_relation/gate/@instances = 4 
   /channelml/channel_type/current_voltage_relation/gate/closed_state/@id = n0 
   /channelml/channel_type/current_voltage_relation/gate/open_state/@id = n 
   /channelml/channel_type/current_voltage_relation/gate/transition[1]/@name = alpha 
   /channelml/channel_type/current_voltage_relation/gate/transition[1]/@from = n0 
   /channelml/channel_type/current_voltage_relation/gate/transition[1]/@to = n 
   /channelml/channel_type/current_voltage_relation/gate/transition[1]/@expr_form = exp_linear 
   /channelml/channel_type/current_voltage_relation/gate/transition[1]/@rate = 0.1 
   /channelml/channel_type/current_voltage_relation/gate/transition[1]/@scale = 10 
   /channelml/channel_type/current_voltage_relation/gate/transition[1]/@midpoint = -55 
   /channelml/channel_type/current_voltage_relation/gate/transition[2]/@name = beta 
   /channelml/channel_type/current_voltage_relation/gate/transition[2]/@from = n 
   /channelml/channel_type/current_voltage_relation/gate/transition[2]/@to = n0 
   /channelml/channel_type/current_voltage_relation/gate/transition[2]/@expr_form = exponential 
   /channelml/channel_type/current_voltage_relation/gate/transition[2]/@rate = 0.125 
   /channelml/channel_type/current_voltage_relation/gate/transition[2]/@scale = -80 
   /channelml/channel_type/current_voltage_relation/gate/transition[2]/@midpoint = -65 

// File from which this was generated: /home/padraig/nC_projects/Gaps/cellMechanisms/KConductance/KChannel_HH.xml

// XSL file with mapping to simulator: /home/padraig/nC_projects/Gaps/cellMechanisms/KConductance/ChannelML_v1.8.1_NEURONmod.xsl

ENDCOMMENT


?  This is a NEURON mod file generated from a ChannelML file

?  Unit system of original ChannelML file: Physiological Units

COMMENT
    ChannelML file containing a single Channel description
ENDCOMMENT

TITLE Channel: KConductance

COMMENT
    Simple example of K conductance in squid giant axon. Based on channel from Hodgkin and Huxley 1952
ENDCOMMENT


UNITS {
    (mA) = (milliamp)
    (mV) = (millivolt)
    (S) = (siemens)
    (um) = (micrometer)
    (molar) = (1/liter)
    (mM) = (millimolar)
    (l) = (liter)
}


    
NEURON {
      

    SUFFIX KConductance
    USEION k READ ek WRITE ik VALENCE 1  ? reversal potential of ion is read, outgoing current is written
           
        
    RANGE gmax, gion
    
    RANGE ninf, ntau
    
}

PARAMETER { 
      

    gmax = 0.036 (S/cm2)  ? default value, should be overwritten when conductance placed on cell
    
}



ASSIGNED {
      

    v (mV)
    
    celsius (degC)
          

    ? Reversal potential of k
    ek (mV)
    ? The outward flow of ion: k calculated by rate equations...
    ik (mA/cm2)
    
    
    gion (S/cm2)
    ninf
    ntau (ms)
    
}

BREAKPOINT { 
                        
    SOLVE states METHOD cnexp
        
    gion = gmax * (n
^4)      

    ik = gion*(v - ek)
            

}



INITIAL {
    
    ek = -77.0
        
    rates(v)
    n = ninf
        
    
}
    
STATE {
    n
    
}



DERIVATIVE states {
    rates(v)
    n' = (ninf - n)/ntau
            

}

PROCEDURE rates(v(mV)) {  
    
    ? Note: not all of these may be used, depending on the form of rate equations
    LOCAL  alpha, beta, tau, inf, gamma, zeta
, temp_adj_n,
         A_alpha_n, B_alpha_n, Vhalf_alpha_n,
         A_beta_n, B_beta_n, Vhalf_beta_n
    
    TABLE ninf, ntau
 DEPEND celsius FROM -100 TO 100 WITH 400
    
    UNITSOFF
    temp_adj_n = 1
    
            
                
           

        
    ?      ***  Adding rate equations for gate: n  ***
        
    ? Found a parameterised form of rate equation for alpha, using expression: A*((v-Vhalf)/B) / (1 - exp(-((v-Vhalf)/B)))
    A_alpha_n = 0.1
    B_alpha_n = 10
    Vhalf_alpha_n = -55 
    alpha = A_alpha_n * vtrap((v - Vhalf_alpha_n), B_alpha_n)
    
    
    ? Found a parameterised form of rate equation for beta, using expression: A*exp((v-Vhalf)/B)
    A_beta_n = 0.125
    B_beta_n = -80
    Vhalf_beta_n = -65 
    beta = A_beta_n * exp((v - Vhalf_beta_n) / B_beta_n)
    
    ntau = 1/(temp_adj_n*(alpha + beta))
    ninf = alpha/(alpha + beta)
    


    ?     *** Finished rate equations for gate: n ***
    

         

}


? Function to assist with parameterised expressions of type linoid/exp_linear

FUNCTION vtrap(VminV0, B) {
    if (fabs(VminV0/B) < 1e-6) {
    vtrap = (1 + VminV0/B/2)
}else{
    vtrap = (VminV0 / B) /(1 - exp((-1 *VminV0)/B))
    }
}

UNITSON



'''
NETPYNE simulator compliant export for:

Components:
    null (Type: notes)
    Ca_conc (Type: fixedFactorConcentrationModel:  restingConc=0.0 (SI concentration) decayConstant=0.1 (SI time) rho=9543.150099999999 (SI rho_factor))
    null (Type: notes)
    Ca_pyr (Type: ionChannelHH:  conductance=1.0E-11 (SI conductance))
    null (Type: notes)
    Kahp_pyr (Type: ionChannelHH:  conductance=1.0E-11 (SI conductance))
    null (Type: notes)
    Kdr_bask (Type: ionChannelHH:  conductance=1.0E-11 (SI conductance))
    null (Type: notes)
    Kdr_pyr (Type: ionChannelHH:  conductance=1.0E-11 (SI conductance))
    null (Type: notes)
    LeakConductance_bask (Type: ionChannelPassive:  conductance=1.0E-11 (SI conductance))
    null (Type: notes)
    LeakConductance_pyr (Type: ionChannelPassive:  conductance=1.0E-11 (SI conductance))
    null (Type: notes)
    Na_bask (Type: ionChannelHH:  conductance=1.0E-11 (SI conductance))
    null (Type: notes)
    Na_pyr (Type: ionChannelHH:  conductance=1.0E-11 (SI conductance))
    bask (Type: cell)
    pyr_4_sym (Type: cell)
    null (Type: notes)
    Input_1 (Type: pulseGenerator:  delay=0.1 (SI time) duration=0.5 (SI time) amplitude=6.0E-10 (SI current))
    Input_0 (Type: pulseGenerator:  delay=0.1 (SI time) duration=0.5 (SI time) amplitude=1.0E-10 (SI current))
    network_ACnet2 (Type: networkWithTemperature:  temperature=279.45 (SI temperature))
    sim1 (Type: Simulation:  length=0.7000000000000001 (SI time) step=1.0E-5 (SI time))


    This NETPYNE file has been generated by org.neuroml.export (see https://github.com/NeuroML/org.neuroml.export)
         org.neuroml.export  v1.10.0
         org.neuroml.model   v1.10.0
         jLEMS               v0.11.0

'''
# Main NetPyNE script for: network_ACnet2

# See https://github.com/Neurosim-lab/netpyne

from netpyne import specs  # import netpyne specs module
from netpyne import sim    # import netpyne sim module
from netpyne import __version__ as version

from neuron import h

import sys
import time
import datetime

class NetPyNESimulation():

    def __init__(self, tstop=700.0, dt=0.01, seed=123456789, save_json=False, abs_tol=None):

        self.setup_start = time.time()
        
        self.report_file = open('simulator.props','w')
        self.report_file.write('# Report of running simulation with NetPyNE v%s\n'%version)
        self.report_file.write('Simulator=NetPyNE\n')
        self.report_file.write('SimulatorVersion=%s\n'%version)
        self.report_file.write('SimulationFile=%s\n'%__file__)
        self.report_file.write('PythonVersion=%s\n'%sys.version.replace('\n',' '))
        self.report_file.write('NeuronVersion=%s\n'%h.nrnversion())
        self.report_file.write('NeuroMLExportVersion=1.10.0\n')
        self.report_file.close()
        

        ###############################################################################
        # NETWORK PARAMETERS
        ###############################################################################

        self.nml2_file_name = 'TwoCell.net.nml'

        ###############################################################################
        # SIMULATION PARAMETERS
        ###############################################################################

        self.simConfig = specs.SimConfig()   # object of class SimConfig to store the simulation configuration

        # Simulation parameters
        self.simConfig.duration = self.simConfig.tstop = tstop # Duration of the simulation, in ms
        self.simConfig.dt = dt # Internal integration timestep to use

        # cvode
        if abs_tol is not None:
            self.simConfig.cvode_active = True
            self.simConfig.cvode_atol = abs_tol
        else:
            self.simConfig.cvode_active = False

        # Seeds for randomizers (connectivity, input stimulation and cell locations)
        # Note: locations and connections should be fully specified by the structure of the NeuroML,
        # so seeds for conn & loc shouldn't affect networks structure/behaviour
        self.simConfig.seeds = {'conn': 0, 'stim': 123456789, 'loc': 0}

        self.simConfig.createNEURONObj = 1  # create HOC objects when instantiating network
        self.simConfig.createPyStruct = 1  # create Python structure (simulator-independent) when instantiating network
        self.simConfig.verbose = False  # show detailed messages
        
        self.simConfig.hParams['celsius'] = (279.45 - 273.15)
        
        # Recording
        self.simConfig.recordCells = ['all']
        self.simConfig.recordTraces = {}
        self.simConfig.saveCellSecs=False
        self.simConfig.saveCellConns=False
        self.simConfig.gatherOnlySimData=True

                # For saving to file: baskets_0.0.dat (ref: baskets_v_0_0_OF)
                                
        # Column: v: Pop: baskets; cell: 0; segment id: 0; segment name: soma; Neuron loc: soma(0.5); value: v (v)
        self.simConfig.recordTraces['baskets_v_0_0_OF_baskets_0_soma_v'] = {'sec':'soma','loc':0.5,'var':'v','conds':{'pop':'baskets','cellLabel':0}}
                        
                # For saving to file: baskets_0.1.dat (ref: baskets_v_0_1_OF)
                                
        # Column: v: Pop: baskets; cell: 0; segment id: 1; segment name: dend; Neuron loc: dend(0.5); value: v (v)
        self.simConfig.recordTraces['baskets_v_0_1_OF_baskets_0_dend_v'] = {'sec':'dend','loc':0.5,'var':'v','conds':{'pop':'baskets','cellLabel':0}}
                        
                # For saving to file: pyramidals_0.0.Ca_conc_CONC_ca.dat (ref: pyramidals_ca_0_0_OF)
                                
        # Column: caConc: Pop: pyramidals; cell: 0; segment id: 0; segment name: soma; Neuron loc: soma(0.5); value: caConc (cai)
        self.simConfig.recordTraces['pyramidals_ca_0_0_OF_pyramidals_0_soma_caConc'] = {'sec':'soma','loc':0.5,'var':'cai','conds':{'pop':'pyramidals','cellLabel':0}}
                        
                # For saving to file: pyramidals_0.0.dat (ref: pyramidals_v_0_0_OF)
                                
        # Column: v: Pop: pyramidals; cell: 0; segment id: 0; segment name: soma; Neuron loc: soma(0.5); value: v (v)
        self.simConfig.recordTraces['pyramidals_v_0_0_OF_pyramidals_0_soma_v'] = {'sec':'soma','loc':0.5,'var':'v','conds':{'pop':'pyramidals','cellLabel':0}}
                        
                # For saving to file: pyramidals_0.1.dat (ref: pyramidals_v_0_1_OF)
                                
        # Column: v: Pop: pyramidals; cell: 0; segment id: 1; segment name: apical0; Neuron loc: apical0(0.5); value: v (v)
        self.simConfig.recordTraces['pyramidals_v_0_1_OF_pyramidals_0_apical0_v'] = {'sec':'apical0','loc':0.5,'var':'v','conds':{'pop':'pyramidals','cellLabel':0}}
                        
                # For saving to file: pyramidals_0.2.dat (ref: pyramidals_v_0_2_OF)
                                
        # Column: v: Pop: pyramidals; cell: 0; segment id: 2; segment name: apical2; Neuron loc: apical2(0.5); value: v (v)
        self.simConfig.recordTraces['pyramidals_v_0_2_OF_pyramidals_0_apical2_v'] = {'sec':'apical2','loc':0.5,'var':'v','conds':{'pop':'pyramidals','cellLabel':0}}
                        
                # For saving to file: pyramidals_0.3.dat (ref: pyramidals_v_0_3_OF)
                                
        # Column: v: Pop: pyramidals; cell: 0; segment id: 3; segment name: apical3; Neuron loc: apical3(0.5); value: v (v)
        self.simConfig.recordTraces['pyramidals_v_0_3_OF_pyramidals_0_apical3_v'] = {'sec':'apical3','loc':0.5,'var':'v','conds':{'pop':'pyramidals','cellLabel':0}}
                        
                # For saving to file: pyramidals_0.4.dat (ref: pyramidals_v_0_4_OF)
                                
        # Column: v: Pop: pyramidals; cell: 0; segment id: 4; segment name: apical4; Neuron loc: apical4(0.5); value: v (v)
        self.simConfig.recordTraces['pyramidals_v_0_4_OF_pyramidals_0_apical4_v'] = {'sec':'apical4','loc':0.5,'var':'v','conds':{'pop':'pyramidals','cellLabel':0}}
                        
                # For saving to file: pyramidals_0.5.dat (ref: pyramidals_v_0_5_OF)
                                
        # Column: v: Pop: pyramidals; cell: 0; segment id: 5; segment name: apical1; Neuron loc: apical1(0.5); value: v (v)
        self.simConfig.recordTraces['pyramidals_v_0_5_OF_pyramidals_0_apical1_v'] = {'sec':'apical1','loc':0.5,'var':'v','conds':{'pop':'pyramidals','cellLabel':0}}
                        
                # For saving to file: pyramidals_0.6.dat (ref: pyramidals_v_0_6_OF)
                                
        # Column: v: Pop: pyramidals; cell: 0; segment id: 6; segment name: basal0; Neuron loc: basal0(0.5); value: v (v)
        self.simConfig.recordTraces['pyramidals_v_0_6_OF_pyramidals_0_basal0_v'] = {'sec':'basal0','loc':0.5,'var':'v','conds':{'pop':'pyramidals','cellLabel':0}}
                        
                # For saving to file: pyramidals_0.7.dat (ref: pyramidals_v_0_7_OF)
                                
        # Column: v: Pop: pyramidals; cell: 0; segment id: 7; segment name: basal1; Neuron loc: basal1(0.5); value: v (v)
        self.simConfig.recordTraces['pyramidals_v_0_7_OF_pyramidals_0_basal1_v'] = {'sec':'basal1','loc':0.5,'var':'v','conds':{'pop':'pyramidals','cellLabel':0}}
                        
                # For saving to file: pyramidals_0.8.dat (ref: pyramidals_v_0_8_OF)
                                
        # Column: v: Pop: pyramidals; cell: 0; segment id: 8; segment name: basal2; Neuron loc: basal2(0.5); value: v (v)
        self.simConfig.recordTraces['pyramidals_v_0_8_OF_pyramidals_0_basal2_v'] = {'sec':'basal2','loc':0.5,'var':'v','conds':{'pop':'pyramidals','cellLabel':0}}
                        
        
        self.simConfig.plotCells = ['all']

        self.simConfig.recordStim = True  # record spikes of cell stims
        self.simConfig.recordStep = self.simConfig.dt # Step size in ms to save data (eg. V traces, LFP, etc)

        # Analysis and plotting, see http://neurosimlab.org/netpyne/reference.html#analysis-related-functions
        self.simConfig.analysis['plotRaster'] = False  # Plot raster
        self.simConfig.analysis['plot2Dnet'] = False  # Plot 2D net cells and connections
        self.simConfig.analysis['plotSpikeHist'] = False # plot spike histogram
        self.simConfig.analysis['plotConn'] = False # plot network connectivity
        self.simConfig.analysis['plotSpikePSD'] = False # plot 3d architecture

        # Saving
        self.simConfig.filename = 'network_ACnet2.txt'  # Set file output name
        self.simConfig.saveFileStep = self.simConfig.dt # step size in ms to save data to disk
        # self.simConfig.saveDat = True # save to dat file
        self.simConfig.saveJson = save_json # save to json file


    def run(self):

        ###############################################################################
        # IMPORT & RUN
        ###############################################################################

        print("Running a NetPyNE based simulation for %sms (dt: %sms) at %s degC"%(self.simConfig.duration, self.simConfig.dt, self.simConfig.hParams['celsius']))

        self.setup_sim_start = time.time()
        self.gids = sim.importNeuroML2SimulateAnalyze(self.nml2_file_name,self.simConfig)

        self.sim_end = time.time()
        self.setup_sim_time = self.sim_end - self.setup_sim_start
        print("Finished NetPyNE simulation in %f seconds (%f mins)..."%(self.setup_sim_time, self.setup_sim_time/60.0))

        try:
            self.save_results()
        except Exception as e:
            print("Exception saving results of NetPyNE simulation: %s" % (e))
            return

    def generate_json_only(self):

          ###############################################################################
          # GENERATE NETPYNE JSON REPRESENTATION OF NETWORK
          ###############################################################################

          print("Generating NetPyNE JSON (and mod files)")

          self.simConfig.saveJson = True # save to json file
          from netpyne.conversion.neuromlFormat import importNeuroML2
          self.gids = sim.importNeuroML2(self.nml2_file_name,
                                         self.simConfig,
                                         simulate=False,
                                         analyze=False)

          from netpyne.sim.save import saveData

          json_filename=__file__.replace(".py","")
          saveData(filename=json_filename, include=["simConfig", "netParams", "net"])
          real_json_filename='%s_data.json'%json_filename

          print("Finished exporting the NetPyNE JSON to %s"%real_json_filename)

          return real_json_filename


    def save_results(self):

        ###############################################################################
        #   Saving data (this ensures the data gets saved in the format/files
        #   as specified in the LEMS <Simulation> element)
        ###############################################################################

        if sim.rank==0:
        
            print("Saving traces to file: baskets_0.0.dat (ref: baskets_v_0_0_OF)")

                
            # Column: t
            col_baskets_v_0_0_OF_t = [i*self.simConfig.dt for i in range(int(self.simConfig.duration/self.simConfig.dt))]
                        
            # Column: v: Pop: baskets; cell: 0; segment id: 0; segment name: soma; value: v
            col_baskets_v_0_0_OF_v = sim.allSimData['baskets_v_0_0_OF_baskets_0_soma_v']['cell_%s'%self.gids['baskets'][0]]
                
            dat_file_baskets_v_0_0_OF = open('baskets_0.0.dat', 'w')
            for i in range(len(col_baskets_v_0_0_OF_t)):
                dat_file_baskets_v_0_0_OF.write( '%s\t'%(col_baskets_v_0_0_OF_t[i]/1000.0) +  '%s\t'%(col_baskets_v_0_0_OF_v[i]/1000.0) +  '\n')
            dat_file_baskets_v_0_0_OF.close()

        
            print("Saving traces to file: baskets_0.1.dat (ref: baskets_v_0_1_OF)")

                
            # Column: t
            col_baskets_v_0_1_OF_t = [i*self.simConfig.dt for i in range(int(self.simConfig.duration/self.simConfig.dt))]
                        
            # Column: v: Pop: baskets; cell: 0; segment id: 1; segment name: dend; value: v
            col_baskets_v_0_1_OF_v = sim.allSimData['baskets_v_0_1_OF_baskets_0_dend_v']['cell_%s'%self.gids['baskets'][0]]
                
            dat_file_baskets_v_0_1_OF = open('baskets_0.1.dat', 'w')
            for i in range(len(col_baskets_v_0_1_OF_t)):
                dat_file_baskets_v_0_1_OF.write( '%s\t'%(col_baskets_v_0_1_OF_t[i]/1000.0) +  '%s\t'%(col_baskets_v_0_1_OF_v[i]/1000.0) +  '\n')
            dat_file_baskets_v_0_1_OF.close()

        
            print("Saving traces to file: pyramidals_0.0.Ca_conc_CONC_ca.dat (ref: pyramidals_ca_0_0_OF)")

                
            # Column: t
            col_pyramidals_ca_0_0_OF_t = [i*self.simConfig.dt for i in range(int(self.simConfig.duration/self.simConfig.dt))]
                        
            # Column: caConc: Pop: pyramidals; cell: 0; segment id: 0; segment name: soma; value: caConc
            col_pyramidals_ca_0_0_OF_caConc = sim.allSimData['pyramidals_ca_0_0_OF_pyramidals_0_soma_caConc']['cell_%s'%self.gids['pyramidals'][0]]
                
            dat_file_pyramidals_ca_0_0_OF = open('pyramidals_0.0.Ca_conc_CONC_ca.dat', 'w')
            for i in range(len(col_pyramidals_ca_0_0_OF_t)):
                dat_file_pyramidals_ca_0_0_OF.write( '%s\t'%(col_pyramidals_ca_0_0_OF_t[i]/1000.0) +  '%s\t'%(col_pyramidals_ca_0_0_OF_caConc[i]/1.0) +  '\n')
            dat_file_pyramidals_ca_0_0_OF.close()

        
            print("Saving traces to file: pyramidals_0.0.dat (ref: pyramidals_v_0_0_OF)")

                
            # Column: t
            col_pyramidals_v_0_0_OF_t = [i*self.simConfig.dt for i in range(int(self.simConfig.duration/self.simConfig.dt))]
                        
            # Column: v: Pop: pyramidals; cell: 0; segment id: 0; segment name: soma; value: v
            col_pyramidals_v_0_0_OF_v = sim.allSimData['pyramidals_v_0_0_OF_pyramidals_0_soma_v']['cell_%s'%self.gids['pyramidals'][0]]
                
            dat_file_pyramidals_v_0_0_OF = open('pyramidals_0.0.dat', 'w')
            for i in range(len(col_pyramidals_v_0_0_OF_t)):
                dat_file_pyramidals_v_0_0_OF.write( '%s\t'%(col_pyramidals_v_0_0_OF_t[i]/1000.0) +  '%s\t'%(col_pyramidals_v_0_0_OF_v[i]/1000.0) +  '\n')
            dat_file_pyramidals_v_0_0_OF.close()

        
            print("Saving traces to file: pyramidals_0.1.dat (ref: pyramidals_v_0_1_OF)")

                
            # Column: t
            col_pyramidals_v_0_1_OF_t = [i*self.simConfig.dt for i in range(int(self.simConfig.duration/self.simConfig.dt))]
                        
            # Column: v: Pop: pyramidals; cell: 0; segment id: 1; segment name: apical0; value: v
            col_pyramidals_v_0_1_OF_v = sim.allSimData['pyramidals_v_0_1_OF_pyramidals_0_apical0_v']['cell_%s'%self.gids['pyramidals'][0]]
                
            dat_file_pyramidals_v_0_1_OF = open('pyramidals_0.1.dat', 'w')
            for i in range(len(col_pyramidals_v_0_1_OF_t)):
                dat_file_pyramidals_v_0_1_OF.write( '%s\t'%(col_pyramidals_v_0_1_OF_t[i]/1000.0) +  '%s\t'%(col_pyramidals_v_0_1_OF_v[i]/1000.0) +  '\n')
            dat_file_pyramidals_v_0_1_OF.close()

        
            print("Saving traces to file: pyramidals_0.2.dat (ref: pyramidals_v_0_2_OF)")

                
            # Column: t
            col_pyramidals_v_0_2_OF_t = [i*self.simConfig.dt for i in range(int(self.simConfig.duration/self.simConfig.dt))]
                        
            # Column: v: Pop: pyramidals; cell: 0; segment id: 2; segment name: apical2; value: v
            col_pyramidals_v_0_2_OF_v = sim.allSimData['pyramidals_v_0_2_OF_pyramidals_0_apical2_v']['cell_%s'%self.gids['pyramidals'][0]]
                
            dat_file_pyramidals_v_0_2_OF = open('pyramidals_0.2.dat', 'w')
            for i in range(len(col_pyramidals_v_0_2_OF_t)):
                dat_file_pyramidals_v_0_2_OF.write( '%s\t'%(col_pyramidals_v_0_2_OF_t[i]/1000.0) +  '%s\t'%(col_pyramidals_v_0_2_OF_v[i]/1000.0) +  '\n')
            dat_file_pyramidals_v_0_2_OF.close()

        
            print("Saving traces to file: pyramidals_0.3.dat (ref: pyramidals_v_0_3_OF)")

                
            # Column: t
            col_pyramidals_v_0_3_OF_t = [i*self.simConfig.dt for i in range(int(self.simConfig.duration/self.simConfig.dt))]
                        
            # Column: v: Pop: pyramidals; cell: 0; segment id: 3; segment name: apical3; value: v
            col_pyramidals_v_0_3_OF_v = sim.allSimData['pyramidals_v_0_3_OF_pyramidals_0_apical3_v']['cell_%s'%self.gids['pyramidals'][0]]
                
            dat_file_pyramidals_v_0_3_OF = open('pyramidals_0.3.dat', 'w')
            for i in range(len(col_pyramidals_v_0_3_OF_t)):
                dat_file_pyramidals_v_0_3_OF.write( '%s\t'%(col_pyramidals_v_0_3_OF_t[i]/1000.0) +  '%s\t'%(col_pyramidals_v_0_3_OF_v[i]/1000.0) +  '\n')
            dat_file_pyramidals_v_0_3_OF.close()

        
            print("Saving traces to file: pyramidals_0.4.dat (ref: pyramidals_v_0_4_OF)")

                
            # Column: t
            col_pyramidals_v_0_4_OF_t = [i*self.simConfig.dt for i in range(int(self.simConfig.duration/self.simConfig.dt))]
                        
            # Column: v: Pop: pyramidals; cell: 0; segment id: 4; segment name: apical4; value: v
            col_pyramidals_v_0_4_OF_v = sim.allSimData['pyramidals_v_0_4_OF_pyramidals_0_apical4_v']['cell_%s'%self.gids['pyramidals'][0]]
                
            dat_file_pyramidals_v_0_4_OF = open('pyramidals_0.4.dat', 'w')
            for i in range(len(col_pyramidals_v_0_4_OF_t)):
                dat_file_pyramidals_v_0_4_OF.write( '%s\t'%(col_pyramidals_v_0_4_OF_t[i]/1000.0) +  '%s\t'%(col_pyramidals_v_0_4_OF_v[i]/1000.0) +  '\n')
            dat_file_pyramidals_v_0_4_OF.close()

        
            print("Saving traces to file: pyramidals_0.5.dat (ref: pyramidals_v_0_5_OF)")

                
            # Column: t
            col_pyramidals_v_0_5_OF_t = [i*self.simConfig.dt for i in range(int(self.simConfig.duration/self.simConfig.dt))]
                        
            # Column: v: Pop: pyramidals; cell: 0; segment id: 5; segment name: apical1; value: v
            col_pyramidals_v_0_5_OF_v = sim.allSimData['pyramidals_v_0_5_OF_pyramidals_0_apical1_v']['cell_%s'%self.gids['pyramidals'][0]]
                
            dat_file_pyramidals_v_0_5_OF = open('pyramidals_0.5.dat', 'w')
            for i in range(len(col_pyramidals_v_0_5_OF_t)):
                dat_file_pyramidals_v_0_5_OF.write( '%s\t'%(col_pyramidals_v_0_5_OF_t[i]/1000.0) +  '%s\t'%(col_pyramidals_v_0_5_OF_v[i]/1000.0) +  '\n')
            dat_file_pyramidals_v_0_5_OF.close()

        
            print("Saving traces to file: pyramidals_0.6.dat (ref: pyramidals_v_0_6_OF)")

                
            # Column: t
            col_pyramidals_v_0_6_OF_t = [i*self.simConfig.dt for i in range(int(self.simConfig.duration/self.simConfig.dt))]
                        
            # Column: v: Pop: pyramidals; cell: 0; segment id: 6; segment name: basal0; value: v
            col_pyramidals_v_0_6_OF_v = sim.allSimData['pyramidals_v_0_6_OF_pyramidals_0_basal0_v']['cell_%s'%self.gids['pyramidals'][0]]
                
            dat_file_pyramidals_v_0_6_OF = open('pyramidals_0.6.dat', 'w')
            for i in range(len(col_pyramidals_v_0_6_OF_t)):
                dat_file_pyramidals_v_0_6_OF.write( '%s\t'%(col_pyramidals_v_0_6_OF_t[i]/1000.0) +  '%s\t'%(col_pyramidals_v_0_6_OF_v[i]/1000.0) +  '\n')
            dat_file_pyramidals_v_0_6_OF.close()

        
            print("Saving traces to file: pyramidals_0.7.dat (ref: pyramidals_v_0_7_OF)")

                
            # Column: t
            col_pyramidals_v_0_7_OF_t = [i*self.simConfig.dt for i in range(int(self.simConfig.duration/self.simConfig.dt))]
                        
            # Column: v: Pop: pyramidals; cell: 0; segment id: 7; segment name: basal1; value: v
            col_pyramidals_v_0_7_OF_v = sim.allSimData['pyramidals_v_0_7_OF_pyramidals_0_basal1_v']['cell_%s'%self.gids['pyramidals'][0]]
                
            dat_file_pyramidals_v_0_7_OF = open('pyramidals_0.7.dat', 'w')
            for i in range(len(col_pyramidals_v_0_7_OF_t)):
                dat_file_pyramidals_v_0_7_OF.write( '%s\t'%(col_pyramidals_v_0_7_OF_t[i]/1000.0) +  '%s\t'%(col_pyramidals_v_0_7_OF_v[i]/1000.0) +  '\n')
            dat_file_pyramidals_v_0_7_OF.close()

        
            print("Saving traces to file: pyramidals_0.8.dat (ref: pyramidals_v_0_8_OF)")

                
            # Column: t
            col_pyramidals_v_0_8_OF_t = [i*self.simConfig.dt for i in range(int(self.simConfig.duration/self.simConfig.dt))]
                        
            # Column: v: Pop: pyramidals; cell: 0; segment id: 8; segment name: basal2; value: v
            col_pyramidals_v_0_8_OF_v = sim.allSimData['pyramidals_v_0_8_OF_pyramidals_0_basal2_v']['cell_%s'%self.gids['pyramidals'][0]]
                
            dat_file_pyramidals_v_0_8_OF = open('pyramidals_0.8.dat', 'w')
            for i in range(len(col_pyramidals_v_0_8_OF_t)):
                dat_file_pyramidals_v_0_8_OF.write( '%s\t'%(col_pyramidals_v_0_8_OF_t[i]/1000.0) +  '%s\t'%(col_pyramidals_v_0_8_OF_v[i]/1000.0) +  '\n')
            dat_file_pyramidals_v_0_8_OF.close()

        
        
            save_end = time.time()
            save_time = save_end - self.sim_end
            print("Finished saving results in %f seconds"%(save_time))


        
            self.report_file = open('simulator.props','a')
            self.report_file.write('StartTime=%s\n'%datetime.datetime.fromtimestamp(self.setup_start).strftime('%Y-%m-%d %H:%M:%S'))
            self.report_file.write('RealSetupAndSimulationTime=%s\n'%self.setup_sim_time)
            self.report_file.write('SimulationSaveTime=%s\n'%save_time)
            self.report_file.close()
            print("Saving report of simulation to %s"%('simulator.props'))
        
if __name__ == '__main__':

    save_json = '-json' in sys.argv
    no_run = '-norun' in sys.argv

    ns = NetPyNESimulation(tstop=700.0, dt=0.01, seed=123456789, save_json=save_json, abs_tol=None)

    if not no_run:
      ns.run()
    else:
      if save_json:
        fn = ns.generate_json_only()
        print("Generated: %s"%fn)
        quit()

    if '-nogui' in sys.argv:
        quit()

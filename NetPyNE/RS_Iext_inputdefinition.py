'''
NetPyNE simulator compliant export for:

Components:
    RS (Type: izhikevich2007Cell:  v0=-0.06 (SI voltage) k=7.0E-7 (SI conductance_per_voltage) vr=-0.06 (SI voltage) vt=-0.04 (SI voltage) vpeak=0.035 (SI voltage) a=30.0 (SI per_time) b=-2.0E-9 (SI conductance) c=-0.05 (SI voltage) d=1.0E-10 (SI current) C=1.0E-10 (SI capacitance))
    RS_Iext (Type: pulseGenerator:  delay=0.0 (SI time) duration=0.52 (SI time) amplitude=1.0E-10 (SI current))
    net1 (Type: network)
    sim1 (Type: Simulation:  length=0.52 (SI time) step=1.0E-6 (SI time))


    This NetPyNE file has been generated by org.neuroml.export (see https://github.com/NeuroML/org.neuroml.export)
         org.neuroml.export  v1.5.0
         org.neuroml.model   v1.5.0
         jLEMS               v0.9.8.7

'''
# Input file for Component: RS_Iext

print("Loading input file for RS_Iext")

#from pyNN.neuron import NativeCellType
from neuron import h


class RS_Iext(object):
     
    all_inputs = {}
    parameters = {}

    def __init__(self, **parameters):
        print("Created instance of RS_Iext with params: %s"%parameters)
        self.parameters = parameters

    def inject_into(self, cells):
        print("Injecting into: %s"%cells)
        for id in cells:
            print("Injecting into: %s"%id)
            self.all_inputs[id] = h.RS_Iext(0.5, sec=id._cell.source_section)
            h('forall psection()')
TITLE Mod file for component: Component(id=SpikeSourcePoisson_expoisson type=SpikeSourcePoisson)

COMMENT

    This NEURON file has been generated by org.neuroml.export (see https://github.com/NeuroML/org.neuroml.export)
         org.neuroml.export  v1.5.0
         org.neuroml.model   v1.5.0
         jLEMS               v0.9.8.7

ENDCOMMENT

NEURON {
    POINT_PROCESS SpikeSourcePoisson_expoisson
    RANGE start                             : parameter
    RANGE duration                          : parameter
    RANGE rate                              : parameter
    RANGE end                               : parameter
    RANGE LONG_TIME                         : parameter
    
}

UNITS {
    
    (nA) = (nanoamp)
    (uA) = (microamp)
    (mA) = (milliamp)
    (A) = (amp)
    (mV) = (millivolt)
    (mS) = (millisiemens)
    (uS) = (microsiemens)
    (molar) = (1/liter)
    (kHz) = (kilohertz)
    (mM) = (millimolar)
    (um) = (micrometer)
    (umol) = (micromole)
    (S) = (siemens)
    
}

PARAMETER {
    
    start = 0 (ms)
    duration = 1.0E10 (ms)
    rate = 0.2 (kHz)
    end = 1.0E10 (ms)
    LONG_TIME = 3.59999998E15 (ms)
}

ASSIGNED {
    rate_tsince (ms/ms)
    
}

STATE {
    tsince (ms) 
    nextSpike (ms) 
    nextSpikeTemp (ms) 
    
}

INITIAL {
    rates()
    rates() ? To ensure correct initialisation.
    
    nextSpike = start  + exp(-1 * random_float(1))/  rate
    
    tsince = 0
    
    net_send(0, 1) : go to NET_RECEIVE block, flag 1, for initial state
    
}

BREAKPOINT {
    
    SOLVE states METHOD cnexp
    
    
}

NET_RECEIVE(flag) {
    
    LOCAL weight
    
    
    if (flag == 1) { : Setting watch for top level OnCondition...
        WATCH (tsince  >  nextSpike) 1000
    }
    if (flag == 1000) {
    
        nextSpikeTemp = exp(-1 * random_float(1))/  rate
    
        nextSpike = nextSpikeTemp  + H(((t+  nextSpikeTemp  ) - (  start  +  duration  ))/  duration  )*  LONG_TIME
    
        tsince = 0
    
        net_event(t)
        WATCH (tsince  >  nextSpike) 1000
    
    }
    
}

DERIVATIVE states {
    rates()
    tsince' = rate_tsince 
    
}

PROCEDURE rates() {
    
    rate_tsince = 1 ? Note units of all quantities used here need to be consistent!
    
     
    
}


: Returns a float between 0 and max
FUNCTION random_float(max) {
    
    random_float = scop_random()*max
    
}


: The Heaviside step function
FUNCTION H(x) {
    
    if (x < 0) { H = 0 }
    else if (x > 0) { H = 1 }
    else { H = 0.5 }
    
}

